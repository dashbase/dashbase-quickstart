version: '3.4'

networks:
  frontend:
    driver: overlay
    attachable: true
  backend:
    driver: overlay
    attachable: true

services:
  zookeeper:
    image: zookeeper
    # hostname: zoo1
    networks:
      - backend
    ports:
      - "2181:2181"
    # environment:
    #   ZOO_MY_ID: 1
    #   ZOO_SERVERS: server.1=zoo1:2888:3888

  kafka:
    image: wurstmeister/kafka:0.11.0.1
    depends_on:
      - zookeeper
    networks:
      - backend
    secrets:
      - keystore
    volumes:
      - kafka_data:/dashbase/kafka
      - kafka_logs:/opt/kafka/logs
    env_file:
      - env
    environment:
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:SSL,OUTSIDE:SSL
      KAFKA_ADVERTISED_PROTOCOL_NAME: OUTSIDE
      KAFKA_PROTOCOL_NAME: INSIDE
      KAFKA_SSL_KEYSTORE_LOCATION: /run/secrets/keystore
      KAFKA_SSL_TRUSTSTORE_LOCATION: /run/secrets/keystore
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /dashbase/kafka
      KAFKA_LOG_RETENTION_HOURS: 24
      JMX_PORT: 9999
      # Change the following to external IP/host to make kafka accessible outside of swarm
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_ADVERTISED_PORT: 9094

  proxy:
    image: dashbase/proxy:latest
    depends_on:
      - kafka
    networks:
      - backend
    configs:
      - source: proxy_config
        target: /app/config.yml
    secrets:
      - keystore
    ports:
      - "9200:9200"
    command: ["server", "/app/config.yml"]
    volumes:
      - logs:/app/logs:rw
    env_file:
      - env

  warg:
    image: dashbase/warg:latest
    depends_on:
      - kafka
    networks:
      - backend
    configs:
      - source: warg_config
        target: /app/config.yml
    secrets:
      - keystore
    command: ["server", "/app/config.yml"]
    volumes:
      - logs:/app/logs:rw
    env_file:
      - env

  api:
    image: dashbase/api:latest
    depends_on:
      - zookeeper
      - zipkin
    networks:
      - frontend
      - backend
    configs:
      - source: api_config
        target: /app/config.yml
      - source: dashbase-license
        target: /app/dashbase-license.yml
    secrets:
      - keystore
    ports:
      - "9876:9876"
    command: ["server", "/app/config.yml"]
    volumes:
      - logs:/app/logs:rw
    env_file:
      - env
    environment:
      PORT: 9876
      ADMINPORT: 9976
      ZOOKEEPER_URL: zookeeper:2181
      JAVA_OPTS: -Xmx1g -Xms512m -XX:NewSize=512m
      ZIPKIN_URL: http://zipkin:9411/
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "https://api:9976", "--insecure"]
    #   interval: 3m
    #   timeout: 20s
    #   retries: 3

  web:
    image: dashbase/web:latest
    depends_on:
      - api
      - zipkin
    networks:
      - frontend
    configs:
      - source: web_config
        target: /app/config.yml
    secrets:
      - keystore
    ports:
      - "8080:8080"
    command: ["server", "/app/config.yml"]
    volumes:
      - logs:/app/logs:rw
    env_file:
      - env
    environment:
      PORT: 8080
      ADMINPORT: 8180
      API_PORT: 9876
      API_HOST: api
      ZIPKIN_URL: http://zipkin:9411/
      JAVA_OPTS: -Xmx512m -Xms512m -XX:NewSize=512m
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "https://web:8180", "--insecure"]
    #   interval: 3m
    #   timeout: 20s
    #   retries: 3

  #alerts:
  #  image: dashbase/alerts:latest
  #  depends_on:
  #    - api
  #  networks:
  #    - backend
  #  configs:
  #    - source: alerts_config
  #      target: /app/config.yml
  #  secrets:
  #    - source: keystore
  #      target: /app/keystore
  #  ports:
  #    - "9898:9898"
  #  command: ["server", "/app/config.yml"]
  #  volumes:
  #    - logs:/app/logs:rw
  #  env_file:
  #    - env
  #  environment:
  #    PORT: 9898
  #    ADMINPORT: 9998
  #    API_PORT: 9876
  #    API_HOST: api
  #    JAVA_OPTS: "-Xmx512m -Xms256m -XX:NewSize=256m"
    # healthcheck:
    #   test: ["CMD", "curl", "-f", "https://web:8180", "--insecure"]
    #   interval: 3m
    #   timeout: 20s
    #   retries: 3

  zipkin:
    image: dashbase/zipkin:1.0.0-SNAPSHOT
    depends_on:
      - kafka
    secrets:
      - keystore
    env_file:
      - env
    environment:
      KAFKA_URL: monitor_kafka:9092
      KAFKA_TOPIC: _traces_avro
      KAFKA_SSL: "true"
      KEYSTORE_LOCATION: /run/secrets/keystore
      API_URL: https://api:9876
      TABLE: _traces
      MAX_RESULTS_NUM: 100
    ports:
      - "9411:9411"
    networks:
      - frontend
      - backend
    volumes:
      - logs:/app/logs:rw
#    healthcheck:
#      test: ["CMD", "curl", "-f", "http://zipkin:9411"]
#      interval: 3m
#      timeout: 20s
#      retries: 3


  grafana:
    image: dashbase/grafana
    depends_on:
      - api
    networks:
      - frontend
    secrets:
      - source: cert_pem
        target: /app/cert.pem
      - source: key_pem
        target: /app/key.pem
    ports:
      - "3000:3000"
    volumes:
       - logs:/root/.dashbase/grafana/data/log/
    configs:
      - source: grafana_config
        target: /root/.dashbase/grafana/conf/custom.ini
      - source: grafana_plugin_config
        target: /root/.dashbase/grafana/data/plugins/dashbase/dist/plugin.json
      - source: grafana_api_config
        target: /root/.dashbase/grafana/data/plugins/dashbase/dist/dashboards/dashboard-api.json
      - source: grafana_table_config
        target: /root/.dashbase/grafana/data/plugins/dashbase/dist/dashboards/dashboard-table.json
      - source: grafana_kafka_config
        target: /root/.dashbase/grafana/data/plugins/dashbase/dist/dashboards/dashboard-kafka.json

  grafana_restart_dashbase_app:
    image: byrnedo/alpine-curl
    networks:
      - frontend
    configs:
      - grafana_restart_app_sh
    entrypoint: /bin/sh /grafana_restart_app_sh

##### The following services are to monitor the above services #####
  monitor_zookeeper:
    image: zookeeper
    networks:
      - backend
    ports:
      - 2181

  monitor_kafka:
    image: wurstmeister/kafka:0.11.0.1
    networks:
      - backend
    ports:
      - 9092
    volumes:
      - monitor_kafka_data:/opt/kafka/data
    secrets:
      - keystore
    env_file:
      - env
    environment:
      KAFKA_ZOOKEEPER_CONNECT: monitor_zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:SSL,OUTSIDE:SSL
      KAFKA_ADVERTISED_PROTOCOL_NAME: OUTSIDE
      KAFKA_PROTOCOL_NAME: INSIDE
      KAFKA_SSL_KEYSTORE_LOCATION: /run/secrets/keystore
      KAFKA_SSL_TRUSTSTORE_LOCATION: /run/secrets/keystore
      KAFKA_SSL_CLIENT_AUTH: required
      KAFKA_ADVERTISED_HOST_NAME: monitor_kafka
      KAFKA_ADVERTISED_PORT: 9094
      KAFKA_LOG_DIRS: /opt/kafka/data
      KAFKA_CREATE_TOPICS: "_logs:1:1,_logs_avro:1:1,_metrics:1:1,_metrics_avro:1:1"
      KAFKA_LOG_RETENTION_HOURS: 1

  monitor_filebeat:
    image: docker.elastic.co/beats/filebeat:6.0.0
    configs:
      - source: monitor_filebeat_config
        target: /usr/share/filebeat/filebeat.yml
    networks:
      - backend
    volumes:
      - logs:/app/logs
      - kafka_logs:/app/kafka/logs
    secrets:
      - ca_cert_pem
      - client_cert_pem
      - client_key_pem
    deploy:
      mode: global

  # a single metricbeat for a cluster
  monitor_metricbeat_singleton:
    image: docker.elastic.co/beats/metricbeat:6.0.0
    configs:
      - source: monitor_metricbeat_singleton_config
        target: /usr/share/metricbeat/metricbeat.yml
    networks:
      - backend
    secrets:
      - ca_cert_pem
      - client_cert_pem
      - client_key_pem

  # global (= per host) metricbeat
  #monitor_metricbeat_global:
  #  image: docker.elastic.co/beats/metricbeat:6.0.0
  #  configs:
  #    - source: monitor_metricbeat_global_config
  #      target: /usr/share/metricbeat/metricbeat.yml
  #  volumes:
  #    ## /proc and /sys are only available on Linux.
  #    ## comment out the followings if deploying onto non-Linux machine
  #    - /proc:/hostfs/proc:ro
  #    - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
  #    - /:/hostfs:ro
  #  networks:
  #    - backend
  #  secrets:
  #    - ca_cert_pem
  #    - client_cert_pem
  #    - client_key_pem
  #  command: -e --system.hostfs=/hostfs
  #  deploy:
  #    mode: global

  monitor_warg:
    image: dashbase/warg:latest
    configs:
      - source: monitor_warg_config
        target: /app/config.yml
    secrets:
      - keystore
    command: ["server", "/app/config.yml"]
    networks:
      - backend
    env_file:
      - env

  monitor_logs:
    image: dashbase/table:latest
    configs:
      - source: monitor_table_config
        target: /app/config.yml
    secrets:
      - keystore
    ports:
      - "8888"
      - "8988"
    networks:
      - backend
    volumes:
      - logs:/app/logs:rw
      - monitor_index:/dashbase/index:rw
    env_file:
      - env
    environment:
      TABLE_NAME: _logs
      KAFKA_TOPIC: _logs
      STORE_RAW_INPUT: "true"
      ZOOKEEPER_URL: zookeeper:2181
      ZIPKIN_URL: http://zipkin:9411/
      PORT: 8888
      ADMINPORT: 8988
      JAVA_OPTS: -Xmx1g -Xms512m -XX:NewSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/app/heapdump
    command: ["server", "/app/config.yml"]

  monitor_metrics:
    image: dashbase/table:latest
    configs:
      - source: monitor_table_config
        target: /app/config.yml
    secrets:
      - keystore
    ports:
      - "10888"
      - "10988"
    networks:
      - backend
    volumes:
      - logs:/app/logs:rw
      - monitor_index:/dashbase/index:rw
    env_file:
      - env
    environment:
      TABLE_NAME: _metrics
      KAFKA_TOPIC: _metrics
      STORE_RAW_INPUT: "false"
      ZOOKEEPER_URL: zookeeper:2181
      ZIPKIN_URL: http://zipkin:9411/
      PORT: 10888
      ADMINPORT: 10988
      JAVA_OPTS: -Xmx2g -Xms1g -XX:NewSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/app/heapdump
    command: ["server", "/app/config.yml"]

  monitor_traces:
    image: dashbase/table:latest
    configs:
      - source: monitor_table_config
        target: /app/config.yml
    secrets:
      - keystore
    ports:
      - "11888"
      - "11988"
    networks:
      - backend
    volumes:
      - logs:/app/logs:rw
      - monitor_index:/dashbase/index:rw
    env_file:
      - env
    environment:
      TABLE_NAME: _traces
      KAFKA_TOPIC: _traces
      STORE_RAW_INPUT: "true"
      ZOOKEEPER_URL: zookeeper:2181
      ZIPKIN_URL: http://zipkin:9411/
      PORT: 11888
      ADMINPORT: 11988
      JAVA_OPTS: -Xmx2g -Xms1g -XX:NewSize=512m -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=/app/heapdump
    command: ["server", "/app/config.yml"]

volumes:
  table_index:
  kafka_data:
  monitor_index:
  monitor_kafka_data:
  kafka_logs:
  logs:

configs:
  table_config:
    file: ./config/dashbase-tables/table/conf/config.yml
  web_config:
    file: ./config/dashbase-web/conf/config.yml
  alerts_config:
    file: ./config/dashbase-alerts/conf/config.yml
  api_config:
    file: ./config/dashbase-api/conf/config.yml
  proxy_config:
    file: ./config/proxy/config.yml
  warg_config:
    file: ./config/warg/config.yml
  dashbase-license:
    file: ./dashbase-license.yml
  monitor_filebeat_config:
    file: config/filebeat/filebeat.yml
  monitor_metricbeat_singleton_config:
    file: config/metricbeat/singleton.yml
  monitor_metricbeat_global_config:
    file: config/metricbeat/global.yml
  monitor_warg_config:
    file: config/warg/monitor.yml
  monitor_table_config:
    file: config/dashbase-tables/monitor/config.yml
  # Grafana config files
  grafana_config:
    file: config/grafana/custom.ini
  grafana_plugin_config:
    file: config/grafana/plugin.json
  grafana_api_config:
    file: config/grafana/dashboards/dashboard-api.json
  grafana_table_config:
    file: config/grafana/dashboards/dashboard-table.json
  grafana_kafka_config:
    file: config/grafana/dashboards/dashboard-kafka.json
  grafana_zk_config:
    file: config/grafana/dashboards/dashboard-zookeeper.json
  grafana_restart_app_sh:
    file: config/grafana/restart_dashbase_app.sh

secrets:
  cert_pem:
    file: ./cert.pem
  key_pem:
    file: ./key.pem
  keystore:
    file: ./keystore
  ca_cert_pem:
    file: ./ca-cert.pem
  client_cert_pem:
    file: ./client-cert.pem
  client_key_pem:
    file: ./client-key.pem
